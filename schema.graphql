type ChainInfo @entity {
  id: ID!
  specVersion: Int!
  transactionVersion: Int!
  genesisHash: String!
  blockHash: String!
  blockNumber: Int! @index
  existentialDeposit: BigInt!
  timestamp: DateTime!
  marketplace: Marketplace
}

type Marketplace {
  protocolFee: Float!
  fixedPriceListingCount: Int!
  auctionListingCount: Int!
}

interface Action {
  timestamp: DateTime
  blockNumber: Int
  extrinsicHash: String
}

interface CanFail {
  success: Boolean
}

enum TransferDirection {
  From
  To
}

type Fee @entity {
  id: ID!
  amount: BigInt
  who: Account!
}

type Transfer implements Action & CanFail @entity {
  id: ID!
  timestamp: DateTime!
  blockNumber: Int! @index
  extrinsicHash: String! @index
  to: TransferLocationAccount
  from: TransferLocationAccount!
  asset: TransferAsset!
  fee: Fee
  tip: BigInt
  error: String
  success: Boolean! @index
  type: TransferType!
}

type TransferLocationAccount {
  id: String!
}

union TransferAsset = TransferAssetToken | TransferAssetMultiToken

enum TransferType {
  Native
}

type TransferAssetToken {
  symbol: String
  amount: BigInt
}

type TransferAssetMultiToken {
  tokens: [TransferAssetToken]
}

# entity for linking account and transfer
type AccountTransfer @entity {
  id: ID!
  transfer: Transfer
  account: Account!
  direction: TransferDirection
}

type Account @entity {
  id: ID!

  transfers: [AccountTransfer!] @derivedFrom(field: "account")

  collectionsOwned: [Collection] @derivedFrom(field: "owner")
  collectionAccounts: [CollectionAccount] @derivedFrom(field: "account")
  tokenAccounts: [TokenAccount] @derivedFrom(field: "account")

  lastUpdateBlock: Int!
}

type MintPolicy {
  maxTokenCount: BigInt
  maxTokenSupply: BigInt
  forceSingleMint: Boolean!
}

type TransferPolicy {
  isFrozen: Boolean
}

type Collection @entity {
  id: ID!

  # Storage defaults
  owner: Account!
  mintPolicy: MintPolicy!
  burnPolicy: String
  transferPolicy: TransferPolicy
  attributePolicy: String
  tokenCount: Int!
  attributeCount: Int!
  totalDeposit: BigInt!

  # Relations
  tokens: [Token] @derivedFrom(field: "collection")
  collectionAccounts: [CollectionAccount] @derivedFrom(field: "collection")
  tokenAccounts: [TokenAccount] @derivedFrom(field: "collection")
  attributes: [Attribute] @derivedFrom(field: "collection")

  # Extras
  name: String
  createdAt: DateTime!
}

type CollectionApproval {
  account: String!
  expiration: Int
}

type CollectionAccount @entity {
  id: ID!

  # Storage defaults
  isFrozen: Boolean!
  approvals: [CollectionApproval!]
  accountCount: Int!

  # Relations
  account: Account!
  collection: Collection!

  # Extras
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum CapType {
  SingleMint
  Supply
}

type Token @entity {
  id: ID!

  # Storage defaults
  tokenId: BigInt!
  supply: BigInt!
  capType: CapType
  capSupply: BigInt
  isFrozen: Boolean!
  minimumBalance: BigInt!
  unitPrice: BigInt!
  mintDeposit: BigInt!
  attributeCount: Int!

  # Relations
  collection: Collection!
  tokenAccounts: [TokenAccount] @derivedFrom(field: "token")
  attributes: [Attribute] @derivedFrom(field: "token")
  listings: [Listing] @derivedFrom(field: "makeAssetId")

  # Extras
  name: String
  createdAt: DateTime!
}

type TokenApproval {
  account: String!
  amount: BigInt!
  expiration: Int
}

type TokenNamedReserve {
  pallet: String!
  amount: BigInt!
}

type TokenLock {
  pallet: String!
  amount: BigInt!
}

type TokenAccount @entity {
  id: ID!

  # Storage defaults
  balance: BigInt!
  reservedBalance: BigInt!
  lockedBalance: BigInt!
  namedReserves: [TokenNamedReserve!]
  locks: [TokenLock!]
  approvals: [TokenApproval!]
  isFrozen: Boolean!

  # Relations
  account: Account!
  collection: Collection!
  token: Token!

  # Extras
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Attribute @entity {
  id: ID!

  # Storage defaults
  key: String!
  value: String!
  deposit: BigInt!

  # Relations
  collection: Collection!
  token: Token

  # Extras
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum FeeSide {
  NoFee
  Make
  Take
}

enum ListingType {
  FixedPrice
  Auction
}

type FixedPriceData {
  listingType: ListingType!
}

type AuctionData {
  listingType: ListingType!
  startHeight: Int!
  endHeight: Int!
}

union ListingData = FixedPriceData | AuctionData

type FixedPriceState {
  listingType: ListingType!
  amountFilled: BigInt!
}

type AuctionState {
  listingType: ListingType!
  highBid: Bid
}

type Bid @entity {
  id: ID!

  # Storage defaults
  bidder: Account!
  price: BigInt!

  # Extras
  listing: Listing!
  height: Int!

  createdAt: DateTime!

}

union ListingState = FixedPriceState | AuctionState

enum ListingStatusType {
  Active
  Cancelled
  Finalized
}

type ActiveListing {
  listingStatus: ListingStatusType!
}

type CancelledListing {
  listingStatus: ListingStatusType!
  height: Int
  createdAt: DateTime
}

type FinalizedListing {
  listingStatus: ListingStatusType!
  height: Int
  createdAt: DateTime
}

union ListingStatus = ActiveListing | CancelledListing | FinalizedListing

type Listing @entity {
  id: ID!

  # Storage defaults
  seller: Account!
  makeAssetId: Token!
  takeAssetId: Token!
  amount: BigInt!
  price: BigInt!
  minTakeValue: BigInt!
  feeSide: FeeSide!
  height: Int!
  deposit: BigInt!
  salt: String!
  data: ListingData!
  state: ListingState!

  # Relations
  bids: [Bid] @derivedFrom(field: "listing")

  # Extras
  status: ListingStatus!

  createdAt: DateTime!
  updatedAt: DateTime!
}

