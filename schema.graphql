type AccountBalance {
  free: BigInt!
  reserved: BigInt!
  miscFrozen: BigInt!
  feeFrozen: BigInt!
}

type Account @entity {
  id: ID!
  balance: AccountBalance!
  nonce: Int!
  collectionAccounts: [CollectionAccount] @derivedFrom(field: "account")
  tokenAccounts: [TokenAccount] @derivedFrom(field: "account")
  lastUpdateBlock: Int!
}

type MintPolicy {
  maxTokenCount: BigInt
  maxTokenSupply: BigInt
  forceSingleMint: Boolean!
}

type TransferPolicy {
  isFrozen: Boolean
}

type Collection @entity {
  id: ID!

  # Storage defaults
  owner: String # Change to type
  mintPolicy: MintPolicy!
  burnPolicy: String
  transferPolicy: TransferPolicy
  attributePolicy: String
  tokenCount: Int!
  attributeCount: Int!
  totalDeposit: BigInt!

  # Relations
  tokens: [Token] @derivedFrom(field: "collection")
  #accounts: [CollectionAccount] @derivedFrom(field: "collection")

  # Extras
  createdAt: DateTime!
}

type CollectionApproval {
  account: String!
  expiration: Int
}

type CollectionAccount @entity {
  id: ID!

  # Storage defaults
  isFrozen: Boolean!
  approvals: [CollectionApproval!]
  accountCount: Int!

  # Relations
  account: Account!
  collection: Collection!
}

enum CapType {
  SingleMint
  Supply
}

type Token @entity {
  id: ID!

  # Storage defaults
  supply: BigInt!
  capType: CapType
  capSupply: BigInt
  isFrozen: Boolean!
  minimumBalance: BigInt!
  unitPrice: BigInt!
  mintDeposit: BigInt!
  attributeCount: Int!

  # Relations
  collection: Collection!
  #accounts: [TokenAccount] @derivedFrom(field: "token")

  # Extras
  createdAt: DateTime!
}

type TokenApproval {
  account: String!
  amount: BigInt!
  expiration: Int
}

type TokenAccount @entity {
  id: ID!

  # Storage defaults
  balance: BigInt!
  reservedBalance: BigInt!
  lockedBalance: BigInt!
  namedReserves: String # Change to type
  locks: String # Change to type
  approvals: [TokenApproval!]
  isFrozen: Boolean!

  # Relations
  account: Account!
  collection: Collection!
  token: Token!
}

type Attribute @entity {
  id: ID!

  # Storage defaults
  key: String!
  value: String!
  deposit: BigInt!

  # Relations
  collection: Collection!
  token: Token
}